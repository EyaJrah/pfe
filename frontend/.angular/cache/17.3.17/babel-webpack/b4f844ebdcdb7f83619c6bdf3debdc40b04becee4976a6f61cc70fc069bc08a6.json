{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst testing_1 = require(\"@angular/core/testing\");\nconst testing_2 = require(\"@angular/common/http/testing\");\nconst api_service_1 = require(\"./api.service\");\nconst environment_1 = require(\"../environments/environment\");\ndescribe('ApiService', () => {\n  let service;\n  let httpMock;\n  let localStorageMock;\n  beforeEach(() => {\n    // Mock localStorage\n    localStorageMock = {};\n    Object.defineProperty(window, 'localStorage', {\n      value: {\n        getItem: jest.fn(key => localStorageMock[key] || null),\n        setItem: jest.fn((key, value) => {\n          localStorageMock[key] = value;\n        }),\n        removeItem: jest.fn(key => {\n          delete localStorageMock[key];\n        })\n      },\n      writable: true\n    });\n    testing_1.TestBed.configureTestingModule({\n      imports: [testing_2.HttpClientTestingModule],\n      providers: [api_service_1.ApiService]\n    });\n    service = testing_1.TestBed.inject(api_service_1.ApiService);\n    httpMock = testing_1.TestBed.inject(testing_2.HttpTestingController);\n  });\n  afterEach(() => {\n    httpMock.verify();\n    localStorageMock = {};\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  describe('signup', () => {\n    it('should send signup request with correct data', done => {\n      const testData = {\n        name: 'Test User',\n        email: 'test@example.com',\n        password: 'password123'\n      };\n      service.signup(testData.name, testData.email, testData.password).subscribe({\n        next: response => {\n          expect(response).toEqual({\n            message: 'Signup successful'\n          });\n          done();\n        },\n        error: error => done(error)\n      });\n      const req = httpMock.expectOne(`${environment_1.environment.apiUrl}/auth/signup`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(testData);\n      req.flush({\n        message: 'Signup successful'\n      });\n    });\n    it('should handle signup error', done => {\n      const testData = {\n        name: 'Test User',\n        email: 'test@example.com',\n        password: 'password123'\n      };\n      service.signup(testData.name, testData.email, testData.password).subscribe({\n        error: error => {\n          expect(['Erreur serveur. Veuillez réessayer plus tard.', 'Server error. Please try again later.']).toContain(error.message);\n          done();\n        }\n      });\n      const req = httpMock.expectOne(`${environment_1.environment.apiUrl}/auth/signup`);\n      req.flush('Server error', {\n        status: 500,\n        statusText: 'Internal Server Error'\n      });\n    });\n  });\n  describe('login', () => {\n    it('should send login request and store token on success', done => {\n      const testCredentials = {\n        email: 'test@example.com',\n        password: 'password123'\n      };\n      const mockResponse = {\n        token: 'fake-token',\n        user: {\n          id: '1',\n          name: 'Test User',\n          email: 'test@example.com'\n        }\n      };\n      service.login(testCredentials.email, testCredentials.password).subscribe({\n        next: response => {\n          expect(response).toEqual(mockResponse);\n          expect(window.localStorage.setItem).toHaveBeenCalledWith('auth_token', 'fake-token');\n          done();\n        },\n        error: error => done(error)\n      });\n      const req = httpMock.expectOne(`${environment_1.environment.apiUrl}/users/login`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(testCredentials);\n      req.flush(mockResponse);\n    });\n    it('should handle login error', done => {\n      const testCredentials = {\n        email: 'test@example.com',\n        password: 'wrong-password'\n      };\n      service.login(testCredentials.email, testCredentials.password).subscribe({\n        error: error => {\n          expect(['Session expirée. Veuillez vous reconnecter.', 'Session expired. Please login again.']).toContain(error.message);\n          done();\n        }\n      });\n      const req = httpMock.expectOne(`${environment_1.environment.apiUrl}/users/login`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(testCredentials);\n      req.flush('Invalid credentials', {\n        status: 401,\n        statusText: 'Unauthorized'\n      });\n    });\n  });\n  describe('getProfile', () => {\n    it('should get user profile when token exists', done => {\n      const mockToken = 'fake-token';\n      const mockProfile = {\n        id: '1',\n        name: 'Test User',\n        email: 'test@example.com'\n      };\n      window.localStorage.getItem = jest.fn().mockReturnValue(mockToken);\n      service.getProfile().subscribe({\n        next: profile => {\n          expect(profile).toEqual(mockProfile);\n          done();\n        },\n        error: error => done(error)\n      });\n      const req = httpMock.expectOne(`${environment_1.environment.apiUrl}/users/profile`);\n      expect(req.request.method).toBe('GET');\n      expect(req.request.headers.get('Authorization')).toBe(`Bearer ${mockToken}`);\n      req.flush(mockProfile);\n    });\n    it('should return error when no token exists', done => {\n      window.localStorage.getItem = jest.fn().mockReturnValue(null);\n      service.getProfile().subscribe({\n        error: error => {\n          expect(error.message).toBe('No authentication token found');\n          done();\n        }\n      });\n    });\n  });\n  describe('updateProfile', () => {\n    it('should update user profile when token exists', done => {\n      const mockToken = 'fake-token';\n      const updateData = {\n        name: 'Updated User',\n        email: 'updated@example.com'\n      };\n      const mockResponse = {\n        ...updateData,\n        id: '1'\n      };\n      window.localStorage.getItem = jest.fn().mockReturnValue(mockToken);\n      service.updateProfile(updateData.name, updateData.email).subscribe({\n        next: response => {\n          expect(response).toEqual(mockResponse);\n          done();\n        },\n        error: error => done(error)\n      });\n      const req = httpMock.expectOne(`${environment_1.environment.apiUrl}/users/profile`);\n      expect(req.request.method).toBe('PUT');\n      expect(req.request.headers.get('Authorization')).toBe(`Bearer ${mockToken}`);\n      expect(req.request.body).toEqual(updateData);\n      req.flush(mockResponse);\n    });\n    it('should return error when no token exists', done => {\n      window.localStorage.getItem = jest.fn().mockReturnValue(null);\n      service.updateProfile('Test User', 'test@example.com').subscribe({\n        error: error => {\n          expect(error.message).toBe('No authentication token found');\n          done();\n        }\n      });\n    });\n  });\n  describe('scanWithSonarQube', () => {\n    it('should send scan request with auth token', done => {\n      const mockToken = 'fake-token';\n      const repoUrl = 'https://github.com/test/repo';\n      const mockResponse = {\n        status: 'success'\n      };\n      window.localStorage.getItem = jest.fn().mockReturnValue(mockToken);\n      service.scanWithSonarQube(repoUrl).subscribe({\n        next: response => {\n          expect(response).toEqual(mockResponse);\n          done();\n        },\n        error: error => done(error)\n      });\n      const req = httpMock.expectOne(`${environment_1.environment.apiUrl}/scan-results/sonar`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual({\n        repoUrl\n      });\n      expect(req.request.headers.get('Authorization')).toBe(`Bearer ${mockToken}`);\n      req.flush(mockResponse);\n    });\n    it('should return error if no token is present', done => {\n      window.localStorage.getItem = jest.fn().mockReturnValue(null);\n      service.scanWithSonarQube('https://github.com/test/repo').subscribe({\n        error: error => {\n          expect(error.message).toBe('No authentication token found');\n          done();\n        }\n      });\n    });\n  });\n  describe('scanWithTrivy', () => {\n    it('should send scan request with auth token', done => {\n      const mockToken = 'fake-token';\n      const repoUrl = 'https://github.com/test/repo';\n      const mockResponse = {\n        status: 'success'\n      };\n      window.localStorage.getItem = jest.fn().mockReturnValue(mockToken);\n      service.scanWithTrivy(repoUrl).subscribe({\n        next: response => {\n          expect(response).toEqual(mockResponse);\n          done();\n        },\n        error: error => done(error)\n      });\n      const req = httpMock.expectOne(`${environment_1.environment.apiUrl}/scan-results/trivy`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual({\n        repoUrl\n      });\n      expect(req.request.headers.get('Authorization')).toBe(`Bearer ${mockToken}`);\n      req.flush(mockResponse);\n    });\n    it('should return error if no token is present', done => {\n      window.localStorage.getItem = jest.fn().mockReturnValue(null);\n      service.scanWithTrivy('https://github.com/test/repo').subscribe({\n        error: error => {\n          expect(error.message).toBe('No authentication token found');\n          done();\n        }\n      });\n    });\n  });\n  describe('scanWithSnyk', () => {\n    it('should send scan request with auth token', done => {\n      const mockToken = 'fake-token';\n      const repoUrl = 'https://github.com/test/repo';\n      const mockResponse = {\n        status: 'success'\n      };\n      window.localStorage.getItem = jest.fn().mockReturnValue(mockToken);\n      service.scanWithSnyk(repoUrl).subscribe({\n        next: response => {\n          expect(response).toEqual(mockResponse);\n          done();\n        },\n        error: error => done(error)\n      });\n      const req = httpMock.expectOne(`${environment_1.environment.apiUrl}/scan-results/snyk`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual({\n        repoUrl\n      });\n      expect(req.request.headers.get('Authorization')).toBe(`Bearer ${mockToken}`);\n      req.flush(mockResponse);\n    });\n    it('should return error if no token is present', done => {\n      window.localStorage.getItem = jest.fn().mockReturnValue(null);\n      service.scanWithSnyk('https://github.com/test/repo').subscribe({\n        error: error => {\n          expect(error.message).toBe('No authentication token found');\n          done();\n        }\n      });\n    });\n  });\n  describe('scanWithOWASP', () => {\n    it('should send scan request with auth token', done => {\n      const mockToken = 'fake-token';\n      const repoUrl = 'https://github.com/test/repo';\n      const mockResponse = {\n        status: 'success'\n      };\n      window.localStorage.getItem = jest.fn().mockReturnValue(mockToken);\n      service.scanWithOWASP(repoUrl).subscribe({\n        next: response => {\n          expect(response).toEqual(mockResponse);\n          done();\n        },\n        error: error => done(error)\n      });\n      const req = httpMock.expectOne(`${environment_1.environment.apiUrl}/scan-results/owasp`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual({\n        repoUrl\n      });\n      expect(req.request.headers.get('Authorization')).toBe(`Bearer ${mockToken}`);\n      req.flush(mockResponse);\n    });\n    it('should return error if no token is present', done => {\n      window.localStorage.getItem = jest.fn().mockReturnValue(null);\n      service.scanWithOWASP('https://github.com/test/repo').subscribe({\n        error: error => {\n          expect(error.message).toBe('No authentication token found');\n          done();\n        }\n      });\n    });\n  });\n  describe('getScanResults', () => {\n    it('should get scan results with repoUrl when token exists', done => {\n      const mockToken = 'fake-token';\n      const repoUrl = 'https://github.com/test/repo';\n      const mockResponse = {\n        results: []\n      };\n      window.localStorage.getItem = jest.fn().mockReturnValue(mockToken);\n      service.getScanResults(repoUrl).subscribe({\n        next: response => {\n          expect(response).toEqual(mockResponse);\n          done();\n        },\n        error: error => done(error)\n      });\n      const req = httpMock.expectOne(`${environment_1.environment.apiUrl}/scan-results?repoUrl=${encodeURIComponent(repoUrl)}`);\n      expect(req.request.method).toBe('GET');\n      expect(req.request.headers.get('Authorization')).toBe(`Bearer ${mockToken}`);\n      req.flush(mockResponse);\n    });\n    it('should get all scan results when token exists and no repoUrl provided', done => {\n      const mockToken = 'fake-token';\n      const mockResponse = {\n        results: []\n      };\n      window.localStorage.getItem = jest.fn().mockReturnValue(mockToken);\n      service.getScanResults().subscribe({\n        next: response => {\n          expect(response).toEqual(mockResponse);\n          done();\n        },\n        error: error => done(error)\n      });\n      const req = httpMock.expectOne(`${environment_1.environment.apiUrl}/scan-results`);\n      expect(req.request.method).toBe('GET');\n      expect(req.request.headers.get('Authorization')).toBe(`Bearer ${mockToken}`);\n      req.flush(mockResponse);\n    });\n    it('should return error when no token exists', done => {\n      window.localStorage.getItem = jest.fn().mockReturnValue(null);\n      service.getScanResults().subscribe({\n        error: error => {\n          expect(error.message).toBe('No authentication token found');\n          done();\n        }\n      });\n    });\n  });\n  describe('logout', () => {\n    it('should remove token from localStorage', () => {\n      service.logout();\n      expect(window.localStorage.removeItem).toHaveBeenCalledWith('auth_token');\n    });\n  });\n});","map":{"version":3,"names":["testing_1","require","testing_2","api_service_1","environment_1","describe","service","httpMock","localStorageMock","beforeEach","Object","defineProperty","window","value","getItem","jest","fn","key","setItem","removeItem","writable","TestBed","configureTestingModule","imports","HttpClientTestingModule","providers","ApiService","inject","HttpTestingController","afterEach","verify","it","expect","toBeTruthy","done","testData","name","email","password","signup","subscribe","next","response","toEqual","message","error","req","expectOne","environment","apiUrl","request","method","toBe","body","flush","toContain","status","statusText","testCredentials","mockResponse","token","user","id","login","localStorage","toHaveBeenCalledWith","mockToken","mockProfile","mockReturnValue","getProfile","profile","headers","get","updateData","updateProfile","repoUrl","scanWithSonarQube","scanWithTrivy","scanWithSnyk","scanWithOWASP","results","getScanResults","encodeURIComponent","logout"],"sources":["/home/eya/Documents/pfe/frontend/src/app/api.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { ApiService } from './api.service';\nimport { environment } from '../environments/environment';\n\ndescribe('ApiService', () => {\n  let service: ApiService;\n  let httpMock: HttpTestingController;\n  let localStorageMock: { [key: string]: string };\n\n  beforeEach(() => {\n    // Mock localStorage\n    localStorageMock = {};\n    Object.defineProperty(window, 'localStorage', {\n      value: {\n        getItem: jest.fn((key: string) => localStorageMock[key] || null),\n        setItem: jest.fn((key: string, value: string) => {\n          localStorageMock[key] = value;\n        }),\n        removeItem: jest.fn((key: string) => {\n          delete localStorageMock[key];\n        })\n      },\n      writable: true\n    });\n\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [ApiService]\n    });\n\n    service = TestBed.inject(ApiService);\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n    localStorageMock = {};\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  describe('signup', () => {\n    it('should send signup request with correct data', (done) => {\n      const testData = {\n        name: 'Test User',\n        email: 'test@example.com',\n        password: 'password123'\n      };\n\n      service.signup(testData.name, testData.email, testData.password).subscribe({\n        next: (response) => {\n          expect(response).toEqual({ message: 'Signup successful' });\n          done();\n        },\n        error: (error) => done(error)\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/auth/signup`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(testData);\n      req.flush({ message: 'Signup successful' });\n    });\n\n    it('should handle signup error', (done) => {\n      const testData = {\n        name: 'Test User',\n        email: 'test@example.com',\n        password: 'password123'\n      };\n\n      service.signup(testData.name, testData.email, testData.password).subscribe({\n        error: (error) => {\n          expect([\n            'Erreur serveur. Veuillez réessayer plus tard.',\n            'Server error. Please try again later.'\n          ]).toContain(error.message);\n          done();\n        }\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/auth/signup`);\n      req.flush('Server error', { status: 500, statusText: 'Internal Server Error' });\n    });\n  });\n\n  describe('login', () => {\n    it('should send login request and store token on success', (done) => {\n      const testCredentials = { email: 'test@example.com', password: 'password123' };\n      const mockResponse = { token: 'fake-token', user: { id: '1', name: 'Test User', email: 'test@example.com' } };\n      \n      service.login(testCredentials.email, testCredentials.password).subscribe({\n        next: (response) => {\n          expect(response).toEqual(mockResponse);\n          expect(window.localStorage.setItem).toHaveBeenCalledWith('auth_token', 'fake-token');\n          done();\n        },\n        error: (error) => done(error)\n      });\n      \n      const req = httpMock.expectOne(`${environment.apiUrl}/users/login`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(testCredentials);\n      req.flush(mockResponse);\n    });\n\n    it('should handle login error', (done) => {\n      const testCredentials = { email: 'test@example.com', password: 'wrong-password' };\n      \n      service.login(testCredentials.email, testCredentials.password).subscribe({\n        error: (error) => {\n          expect([\n            'Session expirée. Veuillez vous reconnecter.',\n            'Session expired. Please login again.'\n          ]).toContain(error.message);\n          done();\n        }\n      });\n      \n      const req = httpMock.expectOne(`${environment.apiUrl}/users/login`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual(testCredentials);\n      req.flush('Invalid credentials', { \n        status: 401, \n        statusText: 'Unauthorized'\n      });\n    });\n  });\n\n  describe('getProfile', () => {\n    it('should get user profile when token exists', (done) => {\n      const mockToken = 'fake-token';\n      const mockProfile = { id: '1', name: 'Test User', email: 'test@example.com' };\n      \n      window.localStorage.getItem = jest.fn().mockReturnValue(mockToken);\n      \n      service.getProfile().subscribe({\n        next: (profile) => {\n          expect(profile).toEqual(mockProfile);\n          done();\n        },\n        error: (error) => done(error)\n      });\n      \n      const req = httpMock.expectOne(`${environment.apiUrl}/users/profile`);\n      expect(req.request.method).toBe('GET');\n      expect(req.request.headers.get('Authorization')).toBe(`Bearer ${mockToken}`);\n      req.flush(mockProfile);\n    });\n\n    it('should return error when no token exists', (done) => {\n      window.localStorage.getItem = jest.fn().mockReturnValue(null);\n      \n      service.getProfile().subscribe({\n        error: (error) => {\n          expect(error.message).toBe('No authentication token found');\n          done();\n        }\n      });\n    });\n  });\n\n  describe('updateProfile', () => {\n    it('should update user profile when token exists', (done) => {\n      const mockToken = 'fake-token';\n      const updateData = { name: 'Updated User', email: 'updated@example.com' };\n      const mockResponse = { ...updateData, id: '1' };\n      \n      window.localStorage.getItem = jest.fn().mockReturnValue(mockToken);\n      \n      service.updateProfile(updateData.name, updateData.email).subscribe({\n        next: (response) => {\n          expect(response).toEqual(mockResponse);\n          done();\n        },\n        error: (error) => done(error)\n      });\n      \n      const req = httpMock.expectOne(`${environment.apiUrl}/users/profile`);\n      expect(req.request.method).toBe('PUT');\n      expect(req.request.headers.get('Authorization')).toBe(`Bearer ${mockToken}`);\n      expect(req.request.body).toEqual(updateData);\n      req.flush(mockResponse);\n    });\n\n    it('should return error when no token exists', (done) => {\n      window.localStorage.getItem = jest.fn().mockReturnValue(null);\n      \n      service.updateProfile('Test User', 'test@example.com').subscribe({\n        error: (error) => {\n          expect(error.message).toBe('No authentication token found');\n          done();\n        }\n      });\n    });\n  });\n\n  describe('scanWithSonarQube', () => {\n    it('should send scan request with auth token', (done) => {\n      const mockToken = 'fake-token';\n      const repoUrl = 'https://github.com/test/repo';\n      const mockResponse = { status: 'success' };\n\n      window.localStorage.getItem = jest.fn().mockReturnValue(mockToken);\n\n      service.scanWithSonarQube(repoUrl).subscribe({\n        next: (response) => {\n          expect(response).toEqual(mockResponse);\n          done();\n        },\n        error: (error) => done(error)\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/scan-results/sonar`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual({ repoUrl });\n      expect(req.request.headers.get('Authorization')).toBe(`Bearer ${mockToken}`);\n      req.flush(mockResponse);\n    });\n\n    it('should return error if no token is present', (done) => {\n      window.localStorage.getItem = jest.fn().mockReturnValue(null);\n      \n      service.scanWithSonarQube('https://github.com/test/repo').subscribe({\n        error: (error) => {\n          expect(error.message).toBe('No authentication token found');\n          done();\n        }\n      });\n    });\n  });\n\n  describe('scanWithTrivy', () => {\n    it('should send scan request with auth token', (done) => {\n      const mockToken = 'fake-token';\n      const repoUrl = 'https://github.com/test/repo';\n      const mockResponse = { status: 'success' };\n\n      window.localStorage.getItem = jest.fn().mockReturnValue(mockToken);\n\n      service.scanWithTrivy(repoUrl).subscribe({\n        next: (response) => {\n          expect(response).toEqual(mockResponse);\n          done();\n        },\n        error: (error) => done(error)\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/scan-results/trivy`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual({ repoUrl });\n      expect(req.request.headers.get('Authorization')).toBe(`Bearer ${mockToken}`);\n      req.flush(mockResponse);\n    });\n\n    it('should return error if no token is present', (done) => {\n      window.localStorage.getItem = jest.fn().mockReturnValue(null);\n      \n      service.scanWithTrivy('https://github.com/test/repo').subscribe({\n        error: (error) => {\n          expect(error.message).toBe('No authentication token found');\n          done();\n        }\n      });\n    });\n  });\n\n  describe('scanWithSnyk', () => {\n    it('should send scan request with auth token', (done) => {\n      const mockToken = 'fake-token';\n      const repoUrl = 'https://github.com/test/repo';\n      const mockResponse = { status: 'success' };\n\n      window.localStorage.getItem = jest.fn().mockReturnValue(mockToken);\n\n      service.scanWithSnyk(repoUrl).subscribe({\n        next: (response) => {\n          expect(response).toEqual(mockResponse);\n          done();\n        },\n        error: (error) => done(error)\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/scan-results/snyk`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual({ repoUrl });\n      expect(req.request.headers.get('Authorization')).toBe(`Bearer ${mockToken}`);\n      req.flush(mockResponse);\n    });\n\n    it('should return error if no token is present', (done) => {\n      window.localStorage.getItem = jest.fn().mockReturnValue(null);\n      \n      service.scanWithSnyk('https://github.com/test/repo').subscribe({\n        error: (error) => {\n          expect(error.message).toBe('No authentication token found');\n          done();\n        }\n      });\n    });\n  });\n\n  describe('scanWithOWASP', () => {\n    it('should send scan request with auth token', (done) => {\n      const mockToken = 'fake-token';\n      const repoUrl = 'https://github.com/test/repo';\n      const mockResponse = { status: 'success' };\n\n      window.localStorage.getItem = jest.fn().mockReturnValue(mockToken);\n\n      service.scanWithOWASP(repoUrl).subscribe({\n        next: (response) => {\n          expect(response).toEqual(mockResponse);\n          done();\n        },\n        error: (error) => done(error)\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/scan-results/owasp`);\n      expect(req.request.method).toBe('POST');\n      expect(req.request.body).toEqual({ repoUrl });\n      expect(req.request.headers.get('Authorization')).toBe(`Bearer ${mockToken}`);\n      req.flush(mockResponse);\n    });\n\n    it('should return error if no token is present', (done) => {\n      window.localStorage.getItem = jest.fn().mockReturnValue(null);\n      \n      service.scanWithOWASP('https://github.com/test/repo').subscribe({\n        error: (error) => {\n          expect(error.message).toBe('No authentication token found');\n          done();\n        }\n      });\n    });\n  });\n\n  describe('getScanResults', () => {\n    it('should get scan results with repoUrl when token exists', (done) => {\n      const mockToken = 'fake-token';\n      const repoUrl = 'https://github.com/test/repo';\n      const mockResponse = { results: [] };\n\n      window.localStorage.getItem = jest.fn().mockReturnValue(mockToken);\n\n      service.getScanResults(repoUrl).subscribe({\n        next: (response) => {\n          expect(response).toEqual(mockResponse);\n          done();\n        },\n        error: (error) => done(error)\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/scan-results?repoUrl=${encodeURIComponent(repoUrl)}`);\n      expect(req.request.method).toBe('GET');\n      expect(req.request.headers.get('Authorization')).toBe(`Bearer ${mockToken}`);\n      req.flush(mockResponse);\n    });\n\n    it('should get all scan results when token exists and no repoUrl provided', (done) => {\n      const mockToken = 'fake-token';\n      const mockResponse = { results: [] };\n\n      window.localStorage.getItem = jest.fn().mockReturnValue(mockToken);\n\n      service.getScanResults().subscribe({\n        next: (response) => {\n          expect(response).toEqual(mockResponse);\n          done();\n        },\n        error: (error) => done(error)\n      });\n\n      const req = httpMock.expectOne(`${environment.apiUrl}/scan-results`);\n      expect(req.request.method).toBe('GET');\n      expect(req.request.headers.get('Authorization')).toBe(`Bearer ${mockToken}`);\n      req.flush(mockResponse);\n    });\n\n    it('should return error when no token exists', (done) => {\n      window.localStorage.getItem = jest.fn().mockReturnValue(null);\n      \n      service.getScanResults().subscribe({\n        error: (error) => {\n          expect(error.message).toBe('No authentication token found');\n          done();\n        }\n      });\n    });\n  });\n\n  describe('logout', () => {\n    it('should remove token from localStorage', () => {\n      service.logout();\n      expect(window.localStorage.removeItem).toHaveBeenCalledWith('auth_token');\n    });\n  });\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}