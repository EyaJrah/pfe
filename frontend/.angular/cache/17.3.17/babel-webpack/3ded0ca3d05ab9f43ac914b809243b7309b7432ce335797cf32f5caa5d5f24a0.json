{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/home/eya/Documents/pfe/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst testing_1 = require(\"@angular/core/testing\");\nconst navigation_service_1 = require(\"./navigation.service\");\nconst router_1 = require(\"@angular/router\");\ndescribe('NavigationService', () => {\n  let service;\n  let router;\n  beforeEach(() => {\n    router = {\n      navigate: jest.fn().mockResolvedValue(true)\n    };\n    testing_1.TestBed.configureTestingModule({\n      providers: [navigation_service_1.NavigationService, {\n        provide: router_1.Router,\n        useValue: router\n      }]\n    });\n    service = testing_1.TestBed.inject(navigation_service_1.NavigationService);\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  describe('navigateAndReload', () => {\n    it('should navigate to the specified path', /*#__PURE__*/_asyncToGenerator(function* () {\n      const path = '/dashboard';\n      yield service.navigateAndReload(path);\n      expect(router.navigate).toHaveBeenCalledWith([path]);\n    }));\n  });\n});","map":{"version":3,"names":["testing_1","require","navigation_service_1","router_1","describe","service","router","beforeEach","navigate","jest","fn","mockResolvedValue","TestBed","configureTestingModule","providers","NavigationService","provide","Router","useValue","inject","it","expect","toBeTruthy","_asyncToGenerator","path","navigateAndReload","toHaveBeenCalledWith"],"sources":["/home/eya/Documents/pfe/frontend/src/app/services/navigation.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { NavigationService } from './navigation.service';\nimport { Router } from '@angular/router';\n\ndescribe('NavigationService', () => {\n  let service: NavigationService;\n  let router: jest.Mocked<Router>;\n\n  beforeEach(() => {\n    router = {\n      navigate: jest.fn().mockResolvedValue(true)\n    } as any;\n\n    TestBed.configureTestingModule({\n      providers: [\n        NavigationService,\n        { provide: Router, useValue: router }\n      ]\n    });\n\n    service = TestBed.inject(NavigationService);\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  describe('navigateAndReload', () => {\n    it('should navigate to the specified path', async () => {\n      const path = '/dashboard';\n      \n      await service.navigateAndReload(path);\n      \n      expect(router.navigate).toHaveBeenCalledWith([path]);\n    });\n  });\n}); "],"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,oBAAA,GAAAD,OAAA;AACA,MAAAE,QAAA,GAAAF,OAAA;AAEAG,QAAQ,CAAC,mBAAmB,EAAE,MAAK;EACjC,IAAIC,OAA0B;EAC9B,IAAIC,MAA2B;EAE/BC,UAAU,CAAC,MAAK;IACdD,MAAM,GAAG;MACPE,QAAQ,EAAEC,IAAI,CAACC,EAAE,EAAE,CAACC,iBAAiB,CAAC,IAAI;KACpC;IAERX,SAAA,CAAAY,OAAO,CAACC,sBAAsB,CAAC;MAC7BC,SAAS,EAAE,CACTZ,oBAAA,CAAAa,iBAAiB,EACjB;QAAEC,OAAO,EAAEb,QAAA,CAAAc,MAAM;QAAEC,QAAQ,EAAEZ;MAAM,CAAE;KAExC,CAAC;IAEFD,OAAO,GAAGL,SAAA,CAAAY,OAAO,CAACO,MAAM,CAACjB,oBAAA,CAAAa,iBAAiB,CAAC;EAC7C,CAAC,CAAC;EAEFK,EAAE,CAAC,mBAAmB,EAAE,MAAK;IAC3BC,MAAM,CAAChB,OAAO,CAAC,CAACiB,UAAU,EAAE;EAC9B,CAAC,CAAC;EAEFlB,QAAQ,CAAC,mBAAmB,EAAE,MAAK;IACjCgB,EAAE,CAAC,uCAAuC,eAAAG,iBAAA,CAAE,aAAW;MACrD,MAAMC,IAAI,GAAG,YAAY;MAEzB,MAAMnB,OAAO,CAACoB,iBAAiB,CAACD,IAAI,CAAC;MAErCH,MAAM,CAACf,MAAM,CAACE,QAAQ,CAAC,CAACkB,oBAAoB,CAAC,CAACF,IAAI,CAAC,CAAC;IACtD,CAAC,EAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}