{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/home/eya/Documents/pfe/frontend/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst testing_1 = require(\"@angular/core/testing\");\nconst login_component_1 = require(\"./login.component\");\nconst api_service_1 = require(\"../../api.service\");\nconst router_1 = require(\"@angular/router\");\nconst forms_1 = require(\"@angular/forms\");\nconst rxjs_1 = require(\"rxjs\");\nconst http_1 = require(\"@angular/common/http\");\ndescribe('LoginComponent', () => {\n  let component;\n  let fixture;\n  let apiService;\n  let router;\n  let formBuilder;\n  let originalConsoleError;\n  const testCredentials = {\n    email: 'test@example.com',\n    password: 'password123'\n  };\n  beforeEach(/*#__PURE__*/_asyncToGenerator(function* () {\n    // Sauvegarder la fonction console.error originale\n    originalConsoleError = console.error;\n    // Remplacer console.error par un mock\n    console.error = jest.fn();\n    apiService = {\n      login: jest.fn()\n    };\n    router = {\n      navigate: jest.fn()\n    };\n    yield testing_1.TestBed.configureTestingModule({\n      imports: [login_component_1.LoginComponent, forms_1.ReactiveFormsModule],\n      providers: [{\n        provide: api_service_1.ApiService,\n        useValue: apiService\n      }, {\n        provide: router_1.Router,\n        useValue: router\n      }, forms_1.FormBuilder]\n    }).compileComponents();\n    fixture = testing_1.TestBed.createComponent(login_component_1.LoginComponent);\n    component = fixture.componentInstance;\n    formBuilder = testing_1.TestBed.inject(forms_1.FormBuilder);\n    fixture.detectChanges();\n  }));\n  afterEach(() => {\n    // Restaurer la fonction console.error originale\n    console.error = originalConsoleError;\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should initialize with empty form', () => {\n    expect(component.loginForm.get('email')?.value).toBe('');\n    expect(component.loginForm.get('password')?.value).toBe('');\n  });\n  it('should show error message for invalid email', () => {\n    const emailControl = component.loginForm.get('email');\n    emailControl?.setValue('invalid-email');\n    emailControl?.markAsTouched();\n    fixture.detectChanges();\n    expect(emailControl?.errors?.['email']).toBeTruthy();\n  });\n  it('should show error message for short password', () => {\n    const passwordControl = component.loginForm.get('password');\n    passwordControl?.setValue('123');\n    passwordControl?.markAsTouched();\n    fixture.detectChanges();\n    expect(passwordControl?.errors?.['minlength']).toBeTruthy();\n  });\n  it('should call login service with correct credentials', () => {\n    apiService.login.mockReturnValue((0, rxjs_1.of)({\n      token: 'fake-token'\n    }));\n    router.navigate.mockResolvedValue(true);\n    component.loginForm = formBuilder.group({\n      email: [testCredentials.email],\n      password: [testCredentials.password]\n    });\n    component.submitLogin();\n    expect(apiService.login).toHaveBeenCalledWith(testCredentials.email, testCredentials.password);\n  });\n  it('should handle login error', () => {\n    const error = new http_1.HttpErrorResponse({\n      error: 'Login failed'\n    });\n    apiService.login.mockReturnValue((0, rxjs_1.throwError)(() => error));\n    router.navigate.mockResolvedValue(true);\n    component.loginForm = formBuilder.group({\n      email: [testCredentials.email],\n      password: [testCredentials.password]\n    });\n    component.submitLogin();\n    expect(apiService.login).toHaveBeenCalledWith(testCredentials.email, testCredentials.password);\n    expect(console.error).toHaveBeenCalledWith('Login error:', error);\n  });\n});","map":{"version":3,"names":["testing_1","require","login_component_1","api_service_1","router_1","forms_1","rxjs_1","http_1","describe","component","fixture","apiService","router","formBuilder","originalConsoleError","testCredentials","email","password","beforeEach","_asyncToGenerator","console","error","jest","fn","login","navigate","TestBed","configureTestingModule","imports","LoginComponent","ReactiveFormsModule","providers","provide","ApiService","useValue","Router","FormBuilder","compileComponents","createComponent","componentInstance","inject","detectChanges","afterEach","it","expect","toBeTruthy","loginForm","get","value","toBe","emailControl","setValue","markAsTouched","errors","passwordControl","mockReturnValue","of","token","mockResolvedValue","group","submitLogin","toHaveBeenCalledWith","HttpErrorResponse","throwError"],"sources":["/home/eya/Documents/pfe/frontend/src/app/page/login/login.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\r\nimport { LoginComponent } from './login.component';\r\nimport { ApiService } from '../../api.service';\r\nimport { Router } from '@angular/router';\r\nimport { ReactiveFormsModule, FormBuilder } from '@angular/forms';\r\nimport { of, throwError } from 'rxjs';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\ndescribe('LoginComponent', () => {\r\n  let component: LoginComponent;\r\n  let fixture: ComponentFixture<LoginComponent>;\r\n  let apiService: jest.Mocked<ApiService>;\r\n  let router: jest.Mocked<Router>;\r\n  let formBuilder: FormBuilder;\r\n  let originalConsoleError: typeof console.error;\r\n\r\n  const testCredentials = {\r\n    email: 'test@example.com',\r\n    password: 'password123'\r\n  };\r\n\r\n  beforeEach(async () => {\r\n    // Sauvegarder la fonction console.error originale\r\n    originalConsoleError = console.error;\r\n    // Remplacer console.error par un mock\r\n    console.error = jest.fn();\r\n\r\n    apiService = {\r\n      login: jest.fn()\r\n    } as any;\r\n\r\n    router = {\r\n      navigate: jest.fn()\r\n    } as any;\r\n\r\n    await TestBed.configureTestingModule({\r\n      imports: [LoginComponent, ReactiveFormsModule],\r\n      providers: [\r\n        { provide: ApiService, useValue: apiService },\r\n        { provide: Router, useValue: router },\r\n        FormBuilder\r\n      ]\r\n    }).compileComponents();\r\n\r\n    fixture = TestBed.createComponent(LoginComponent);\r\n    component = fixture.componentInstance;\r\n    formBuilder = TestBed.inject(FormBuilder);\r\n    fixture.detectChanges();\r\n  });\r\n\r\n  afterEach(() => {\r\n    // Restaurer la fonction console.error originale\r\n    console.error = originalConsoleError;\r\n  });\r\n\r\n  it('should create', () => {\r\n    expect(component).toBeTruthy();\r\n  });\r\n\r\n  it('should initialize with empty form', () => {\r\n    expect(component.loginForm.get('email')?.value).toBe('');\r\n    expect(component.loginForm.get('password')?.value).toBe('');\r\n  });\r\n\r\n  it('should show error message for invalid email', () => {\r\n    const emailControl = component.loginForm.get('email');\r\n    emailControl?.setValue('invalid-email');\r\n    emailControl?.markAsTouched();\r\n    fixture.detectChanges();\r\n    \r\n    expect(emailControl?.errors?.['email']).toBeTruthy();\r\n  });\r\n\r\n  it('should show error message for short password', () => {\r\n    const passwordControl = component.loginForm.get('password');\r\n    passwordControl?.setValue('123');\r\n    passwordControl?.markAsTouched();\r\n    fixture.detectChanges();\r\n    \r\n    expect(passwordControl?.errors?.['minlength']).toBeTruthy();\r\n  });\r\n\r\n  it('should call login service with correct credentials', () => {\r\n    apiService.login.mockReturnValue(of({ token: 'fake-token' }));\r\n    router.navigate.mockResolvedValue(true);\r\n\r\n    component.loginForm = formBuilder.group({\r\n      email: [testCredentials.email],\r\n      password: [testCredentials.password]\r\n    });\r\n\r\n    component.submitLogin();\r\n\r\n    expect(apiService.login).toHaveBeenCalledWith(testCredentials.email, testCredentials.password);\r\n  });\r\n\r\n  it('should handle login error', () => {\r\n    const error = new HttpErrorResponse({ error: 'Login failed' });\r\n    apiService.login.mockReturnValue(throwError(() => error));\r\n    router.navigate.mockResolvedValue(true);\r\n\r\n    component.loginForm = formBuilder.group({\r\n      email: [testCredentials.email],\r\n      password: [testCredentials.password]\r\n    });\r\n\r\n    component.submitLogin();\r\n\r\n    expect(apiService.login).toHaveBeenCalledWith(testCredentials.email, testCredentials.password);\r\n    expect(console.error).toHaveBeenCalledWith('Login error:', error);\r\n  });\r\n});\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}