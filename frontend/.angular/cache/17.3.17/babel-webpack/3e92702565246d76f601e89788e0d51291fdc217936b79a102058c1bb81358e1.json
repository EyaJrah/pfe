{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.NavigationService = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"@angular/core\");\nconst router_1 = require(\"@angular/router\");\nlet NavigationService = class NavigationService {\n  router;\n  constructor(router) {\n    this.router = router;\n  }\n  navigateAndReload(path) {\n    return this.router.navigate([path]).then(() => {\n      // Détecter l'environnement de test de manière plus fiable\n      const isTestEnvironment = typeof window === 'undefined' || !window.location || typeof window.location.reload !== 'function' ||\n      // Vérifier si nous sommes dans un environnement de test\n      typeof process !== 'undefined' && process.env && process.env['NODE_ENV'] === 'test' ||\n      // Vérifier si nous sommes dans JSDOM\n      typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.includes('jsdom');\n      if (!isTestEnvironment) {\n        window.location.reload();\n      }\n      return true;\n    });\n  }\n  static ctorParameters = () => [{\n    type: router_1.Router\n  }];\n};\nexports.NavigationService = NavigationService;\nexports.NavigationService = NavigationService = tslib_1.__decorate([(0, core_1.Injectable)({\n  providedIn: 'root'\n}), tslib_1.__metadata(\"design:paramtypes\", [router_1.Router])], NavigationService);","map":{"version":3,"names":["core_1","require","router_1","NavigationService","router","constructor","navigateAndReload","path","navigate","then","isTestEnvironment","window","location","reload","process","env","navigator","userAgent","includes","exports","tslib_1","__decorate","Injectable","providedIn","Router"],"sources":["/home/eya/Documents/pfe/frontend/src/app/services/navigation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Router } from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NavigationService {\n  constructor(private router: Router) {}\n\n  navigateAndReload(path: string): Promise<boolean> {\n    return this.router.navigate([path]).then(() => {\n      // Détecter l'environnement de test de manière plus fiable\n      const isTestEnvironment = \n        typeof window === 'undefined' || \n        !window.location || \n        typeof window.location.reload !== 'function' ||\n        // Vérifier si nous sommes dans un environnement de test\n        (typeof process !== 'undefined' && process.env && process.env['NODE_ENV'] === 'test') ||\n        // Vérifier si nous sommes dans JSDOM\n        (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.includes('jsdom'));\n\n      if (!isTestEnvironment) {\n        window.location.reload();\n      }\n      return true;\n    });\n  }\n} "],"mappings":";;;;;;;AAAA,MAAAA,MAAA,GAAAC,OAAA;AACA,MAAAC,QAAA,GAAAD,OAAA;AAKO,IAAME,iBAAiB,GAAvB,MAAMA,iBAAiB;EACRC,MAAA;EAApBC,YAAoBD,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAErCE,iBAAiBA,CAACC,IAAY;IAC5B,OAAO,IAAI,CAACH,MAAM,CAACI,QAAQ,CAAC,CAACD,IAAI,CAAC,CAAC,CAACE,IAAI,CAAC,MAAK;MAC5C;MACA,MAAMC,iBAAiB,GACrB,OAAOC,MAAM,KAAK,WAAW,IAC7B,CAACA,MAAM,CAACC,QAAQ,IAChB,OAAOD,MAAM,CAACC,QAAQ,CAACC,MAAM,KAAK,UAAU;MAC5C;MACC,OAAOC,OAAO,KAAK,WAAW,IAAIA,OAAO,CAACC,GAAG,IAAID,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC,KAAK,MAAO;MACrF;MACC,OAAOC,SAAS,KAAK,WAAW,IAAIA,SAAS,CAACC,SAAS,IAAID,SAAS,CAACC,SAAS,CAACC,QAAQ,CAAC,OAAO,CAAE;MAEpG,IAAI,CAACR,iBAAiB,EAAE;QACtBC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;MAC1B;MACA,OAAO,IAAI;IACb,CAAC,CAAC;EACJ;;;;;AApBWM,OAAA,CAAAhB,iBAAA,GAAAA,iBAAA;4BAAAA,iBAAiB,GAAAiB,OAAA,CAAAC,UAAA,EAH7B,IAAArB,MAAA,CAAAsB,UAAU,EAAC;EACVC,UAAU,EAAE;CACb,CAAC,E,yCAE4BrB,QAAA,CAAAsB,MAAM,G,EADvBrB,iBAAiB,CAqB7B","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}