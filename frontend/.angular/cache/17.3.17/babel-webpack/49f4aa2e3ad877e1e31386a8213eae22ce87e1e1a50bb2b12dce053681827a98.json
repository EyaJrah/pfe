{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LoginComponent = void 0;\nconst tslib_1 = require(\"tslib\");\nconst core_1 = require(\"@angular/core\");\nconst router_1 = require(\"@angular/router\");\nconst forms_1 = require(\"@angular/forms\");\nconst api_service_1 = require(\"../../api.service\");\nconst common_1 = require(\"@angular/common\");\nlet LoginComponent = class LoginComponent {\n  fb;\n  router;\n  apiService;\n  loginForm;\n  errorMessage = '';\n  isLoading = false;\n  constructor(fb, router, apiService) {\n    this.fb = fb;\n    this.router = router;\n    this.apiService = apiService;\n    this.loginForm = this.fb.group({\n      email: ['', [forms_1.Validators.required, forms_1.Validators.email]],\n      password: ['', [forms_1.Validators.required, forms_1.Validators.minLength(6)]]\n    });\n  }\n  submitLogin() {\n    this.errorMessage = '';\n    if (this.loginForm.invalid) {\n      if (this.loginForm.get('email')?.errors?.['required']) {\n        this.errorMessage = 'Email is required';\n      } else if (this.loginForm.get('email')?.errors?.['email']) {\n        this.errorMessage = 'Please enter a valid email';\n      } else if (this.loginForm.get('password')?.errors?.['required']) {\n        this.errorMessage = 'Password is required';\n      } else if (this.loginForm.get('password')?.errors?.['minlength']) {\n        this.errorMessage = 'Password must be at least 6 characters';\n      }\n      return;\n    }\n    const {\n      email,\n      password\n    } = this.loginForm.value;\n    console.log('Attempting login with:', {\n      email\n    });\n    this.isLoading = true;\n    this.apiService.login(email, password).subscribe({\n      next: response => {\n        console.log('Login successful, response:', response);\n        if (response?.token) {\n          // Store the token securely\n          localStorage.setItem('auth_token', response.token);\n          console.log('Token stored in localStorage');\n          // Store user info if available\n          if (response.user) {\n            localStorage.setItem('user_info', JSON.stringify(response.user));\n            console.log('User info stored in localStorage');\n          }\n          // Navigate to dashboard\n          console.log('Navigating to dashboard...');\n          this.router.navigate(['/dashbord']).then(success => console.log('Navigation successful:', success), error => console.error('Navigation failed:', error));\n        } else {\n          console.error('No token in response');\n          this.errorMessage = 'Invalid response from server';\n        }\n        this.isLoading = false;\n      },\n      error: error => {\n        console.error('Login error:', error);\n        this.isLoading = false;\n        if (error.status === 0) {\n          this.errorMessage = 'Cannot connect to server. Please check your internet connection.';\n        } else if (error.status === 400) {\n          this.errorMessage = 'Invalid email or password';\n        } else if (error.status === 401) {\n          this.errorMessage = 'Invalid credentials';\n        } else if (error.error?.message) {\n          this.errorMessage = error.error.message;\n        } else {\n          this.errorMessage = 'An error occurred. Please try again later.';\n        }\n      }\n    });\n  }\n  goToSignUp() {\n    this.router.navigate(['/sign-up']);\n  }\n  static ctorParameters = () => [{\n    type: forms_1.FormBuilder\n  }, {\n    type: router_1.Router\n  }, {\n    type: api_service_1.ApiService\n  }];\n};\nexports.LoginComponent = LoginComponent;\nexports.LoginComponent = LoginComponent = tslib_1.__decorate([(0, core_1.Component)({\n  selector: 'app-login',\n  standalone: true,\n  imports: [common_1.CommonModule, forms_1.ReactiveFormsModule],\n  template: require(\"./login.component.html?ngResource\"),\n  styles: [require(\"./login.component.css?ngResource\")]\n}), tslib_1.__metadata(\"design:paramtypes\", [forms_1.FormBuilder, router_1.Router, api_service_1.ApiService])], LoginComponent);","map":{"version":3,"names":["core_1","require","router_1","forms_1","api_service_1","common_1","LoginComponent","fb","router","apiService","loginForm","errorMessage","isLoading","constructor","group","email","Validators","required","password","minLength","submitLogin","invalid","get","errors","value","console","log","login","subscribe","next","response","token","localStorage","setItem","user","JSON","stringify","navigate","then","success","error","status","message","goToSignUp","exports","tslib_1","__decorate","Component","selector","standalone","imports","CommonModule","ReactiveFormsModule","template","FormBuilder","Router","ApiService"],"sources":["/home/eya/Documents/pfe/frontend/src/app/page/login/login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';\r\nimport { ApiService } from '../../api.service';\r\nimport { CommonModule } from '@angular/common';\r\nimport { HttpErrorResponse } from '@angular/common/http';\r\n\r\ninterface LoginResponse {\r\n  token: string;\r\n  user?: {\r\n    id: string;\r\n    name: string;\r\n    email: string;\r\n  };\r\n}\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [CommonModule, ReactiveFormsModule],\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent {\r\n  loginForm: FormGroup;\r\n  errorMessage: string = '';\r\n  isLoading: boolean = false;\r\n\r\n  constructor(private fb: FormBuilder, private router: Router, private apiService: ApiService) {\r\n    this.loginForm = this.fb.group({\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', [Validators.required, Validators.minLength(6)]]\r\n    });\r\n  }\r\n\r\n  submitLogin() {\r\n    this.errorMessage = '';\r\n    \r\n    if (this.loginForm.invalid) {\r\n      if (this.loginForm.get('email')?.errors?.['required']) {\r\n        this.errorMessage = 'Email is required';\r\n      } else if (this.loginForm.get('email')?.errors?.['email']) {\r\n        this.errorMessage = 'Please enter a valid email';\r\n      } else if (this.loginForm.get('password')?.errors?.['required']) {\r\n        this.errorMessage = 'Password is required';\r\n      } else if (this.loginForm.get('password')?.errors?.['minlength']) {\r\n        this.errorMessage = 'Password must be at least 6 characters';\r\n      }\r\n      return;\r\n    }\r\n\r\n    const { email, password } = this.loginForm.value;\r\n    console.log('Attempting login with:', { email });\r\n    \r\n    this.isLoading = true;\r\n\r\n    this.apiService.login(email, password).subscribe({\r\n      next: (response: LoginResponse) => {\r\n        console.log('Login successful, response:', response);\r\n\r\n        if (response?.token) {\r\n          // Store the token securely\r\n          localStorage.setItem('auth_token', response.token);\r\n          console.log('Token stored in localStorage');\r\n          \r\n          // Store user info if available\r\n          if (response.user) {\r\n            localStorage.setItem('user_info', JSON.stringify(response.user));\r\n            console.log('User info stored in localStorage');\r\n          }\r\n\r\n          // Navigate to dashboard\r\n          console.log('Navigating to dashboard...');\r\n          this.router.navigate(['/dashbord']).then(\r\n            success => console.log('Navigation successful:', success),\r\n            error => console.error('Navigation failed:', error)\r\n          );\r\n        } else {\r\n          console.error('No token in response');\r\n          this.errorMessage = 'Invalid response from server';\r\n        }\r\n        this.isLoading = false;\r\n      },\r\n      error: (error: HttpErrorResponse) => {\r\n        console.error('Login error:', error);\r\n        this.isLoading = false;\r\n        \r\n        if (error.status === 0) {\r\n          this.errorMessage = 'Cannot connect to server. Please check your internet connection.';\r\n        } else if (error.status === 400) {\r\n          this.errorMessage = 'Invalid email or password';\r\n        } else if (error.status === 401) {\r\n          this.errorMessage = 'Invalid credentials';\r\n        } else if (error.error?.message) {\r\n          this.errorMessage = error.error.message;\r\n        } else {\r\n          this.errorMessage = 'An error occurred. Please try again later.';\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  goToSignUp() {\r\n    this.router.navigate(['/sign-up']);\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}