const { exec } = require("child_process"); const util = require("util"); const execPromise = util.promisify(exec); const fs = require("fs").promises; const path = require("path"); async function runTrivyScan(repoPath) { try { console.log('Starting Trivy scan on:', repoPath); const { stdout } = await execPromise( `TRIVY_TIMEOUT=5m trivy fs --cache-dir /tmp/trivy-cache --format json ${repoPath}` ); console.log('Trivy scan completed'); const results = JSON.parse(stdout); if (!results || !results.Results || results.Results.length === 0) { return { Results: [], scanStatus: 'completed', message: 'No vulnerabilities found' }; } return results; } catch (error) { console.error('Error running Trivy scan:', error); return { Results: [], error: error.message, scanStatus: 'failed' }; } } async function cloneRepository(repoUrl, tempDir) { try { console.log('Creating directory:', tempDir); await fs.mkdir(tempDir, { recursive: true }); console.log('Cloning repository:', repoUrl); await execPromise(`git clone ${repoUrl} ${tempDir}`); console.log('Repository cloned successfully'); return true; } catch (error) { console.error('Error cloning repository:', error); throw error; } } async function cleanupTempFiles(tempDir) { try { console.log('Cleaning up:', tempDir); await fs.rm(tempDir, { recursive: true, force: true }); console.log('Cleanup completed'); } catch (error) { console.error('Error cleaning up temporary files:', error); } } module.exports = { runTrivyScan, cloneRepository, cleanupTempFiles };
