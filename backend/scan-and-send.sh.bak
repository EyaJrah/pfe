#!/bin/bash

# Activer le mode debug et arrêter sur la première erreur
set -ex

# Générer un nom de fichier log temporaire unique
LOG_FILE="/tmp/resultats-complets-$(date +%s)-$$.log"

# Rediriger toute la sortie (stdout et stderr) vers le fichier log
exec 1> >(tee -a "$LOG_FILE")
exec 2> >(tee -a "$LOG_FILE" >&2)

TEMP_DIR=$(mktemp -d)
echo "TEMP_DIR:$TEMP_DIR"

# Nettoyage automatique à la fin du script (même en cas d'erreur)
cleanup() {
  echo "Nettoyage en cours..."
  rm -rf "$TEMP_DIR"
  rm -rf "$REPO_NAME"
  echo "Nettoyage terminé"
}
trap cleanup EXIT

# Function to handle Snyk authentication
handle_snyk_auth() {
    echo "Authentification Snyk..."
    if [ -n "$SNYK_TOKEN" ]; then
        echo "Configuration du token Snyk..."
        snyk config set api=$SNYK_TOKEN
    fi
    if ! snyk auth check &> /dev/null; then
        echo "Erreur: Échec de l'authentification Snyk" >&2
        exit 1
    fi
    echo "[DEBUG] snyk auth check passed"
    echo "Authentification Snyk réussie"
}

# Function to get other tool results
get_other_tool_results() {
    echo "=== [DEBUG] Début get_other_tool_results ==="
    
    # Trivy scan
    echo "=== [DEBUG] Lancement Trivy ==="
    if ! timeout 600s trivy fs "$REPO_NAME" --cache-dir ~/.cache/trivy --scanners vuln,secret --include-dev-deps --severity LOW,MEDIUM,HIGH,CRITICAL --format json --timeout 5m --output "$TEMP_DIR/trivy.json"; then
        echo "Erreur: Échec de l'analyse Trivy" >&2
        echo '{"error":"Trivy analysis failed"}' > "$TEMP_DIR/trivy.json"
    fi
    echo "=== [DEBUG] Trivy terminé, code: $? ==="
    ls -l "$TEMP_DIR"
    
    # SNYK scan
    echo "=== [DEBUG] Lancement Snyk ==="
    if [ -f "$REPO_NAME/package.json" ]; then
        echo "Installation des dépendances pour Snyk..."
        echo "Contenu du package.json :"
        cat "$REPO_NAME/package.json"
        echo "Tentative d'installation avec timeout de 10 minutes..."
        if ! timeout 600s (cd "$REPO_NAME" && npm install --no-audit --no-fund --no-package-lock); then
            echo "Erreur: Échec de l'installation des dépendances pour Snyk" >&2
            echo '{"error":"npm install failed for Snyk"}' > "$TEMP_DIR/snyk.json"
            return
        fi
        echo "Dépendances installées avec succès"
    else
        echo "Aucun package.json trouvé, analyse Snyk ignorée"
        echo '{"error":"No package.json found"}' > "$TEMP_DIR/snyk.json"
        return
    fi
    echo "=== [DEBUG] Dépendances Node installées pour Snyk ==="
    echo "Exécution de l'analyse Snyk..."
    if ! timeout 600s (cd "$REPO_NAME" && snyk test --all-projects --org=0927db18-d20b-4277-819e-de3936cf32c8 --json > "$TEMP_DIR/snyk.json" && snyk monitor --all-projects --org=0927db18-d20b-4277-819e-de3936cf32c8); then
        echo "Erreur: Échec de l'analyse Snyk" >&2
        echo '{"error":"Snyk analysis failed"}' > "$TEMP_DIR/snyk.json"
    fi
    echo "=== [DEBUG] Snyk terminé, code: $? ==="
    ls -l "$TEMP_DIR"
    
    # Créer un fichier de suppression XML valide
    SUPPRESSION_FILE="$TEMP_DIR/suppressions.xml"
    echo '<?xml version="1.0" encoding="UTF-8"?>
<suppressions xmlns="https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd">
</suppressions>' > "$SUPPRESSION_FILE"

    # Lancement de OWASP Dependency Check
    echo "=== [DEBUG] Lancement OWASP Dependency Check ==="
    if ! timeout 600s dependency-check --scan "$REPO_NAME" \
                    --format JSON \
                    --out "$TEMP_DIR/dc-report" \
                    --suppression "$SUPPRESSION_FILE" \
                    --failOnCVSS 0 \
                    --enableRetired; then
        echo "Erreur: Échec de l'analyse OWASP Dependency Check" >&2
        echo '{"error":"OWASP Dependency Check analysis failed"}' > "$TEMP_DIR/dc-report/dependency-check-report.json"
    fi
    echo "=== [DEBUG] OWASP terminé, code: $? ==="
    ls -l "$TEMP_DIR/dc-report" || echo "Pas de dossier dc-report"
    echo "=== [DEBUG] Fin get_other_tool_results ==="
}

# Check prerequisites
check_prerequisites() {
    echo "Vérification des prérequis..."
    
    # Vérifier Trivy
    if ! command -v trivy &> /dev/null; then
        echo "Erreur: Trivy n'est pas installé" >&2
        exit 1
    fi
    echo "Trivy est installé"
    
    # Vérifier Snyk
    if ! command -v snyk &> /dev/null; then
        echo "Erreur: Snyk n'est pas installé" >&2
        exit 1
    fi
    echo "Snyk est installé"
    
    # Vérifier Dependency-Check
    if ! command -v dependency-check &> /dev/null; then
        echo "Erreur: Dependency-Check n'est pas installé" >&2
        exit 1
    fi
    echo "Dependency-Check est installé"
    
    # Vérifier SonarScanner
    if ! command -v sonar-scanner &> /dev/null; then
        echo "Erreur: SonarScanner n'est pas installé" >&2
        exit 1
    fi
    echo "SonarScanner est installé"
    
    mkdir -p ~/.cache/trivy
    handle_snyk_auth
    echo "Tous les prérequis sont satisfaits"
}

# Check if repository URL is provided
if [ $# -lt 1 ]; then
    echo "Erreur: URL du dépôt non fournie" >&2
    exit 1
fi

# Clone the repository
REPO_URL=$1
REPO_NAME=$(basename $REPO_URL .git)
ORGANIZATION="eyajrah"

echo "URL du dépôt: $REPO_URL"
echo "Nom du dépôt: $REPO_NAME"

# Charger les variables d'environnement depuis .env si présent
SCRIPT_DIR="$(dirname "$0")"
if [ -f "$SCRIPT_DIR/.env" ]; then
  echo "Chargement des variables d'environnement depuis .env"
  set -a
  source "$SCRIPT_DIR/.env"
  set +a
fi

# Vérification du token SonarCloud
if [ -z "$SONAR_TOKEN" ]; then
  echo "Erreur : SONAR_TOKEN n'est pas défini" >&2
  exit 1
fi
echo "SONAR_TOKEN est défini"

# Vérification du token Snyk
if [ -z "$SNYK_TOKEN" ]; then
  echo "Erreur : SNYK_TOKEN n'est pas défini" >&2
  exit 1
fi
echo "SNYK_TOKEN est défini"

# Vérifier les prérequis avant de commencer
check_prerequisites

# Détermination du PROJECT_KEY et des sources
if [ -f "$REPO_NAME/sonar-project.properties" ]; then
  PROJECT_KEY=$(grep '^sonar.projectKey=' "$REPO_NAME/sonar-project.properties" | cut -d'=' -f2)
else
  PROJECT_KEY="${ORGANIZATION}_${REPO_NAME}"
fi
echo "PROJECT_KEY: $PROJECT_KEY"

if [ -n "$3" ]; then
  SONAR_SOURCES="$3"
elif [ -n "$SONAR_SOURCES" ]; then
  SONAR_SOURCES="$SONAR_SOURCES"
else
  SONAR_SOURCES="."
fi
echo "SONAR_SOURCES: $SONAR_SOURCES"

# Nettoyage du dossier existant avant clonage
if [ -d "$REPO_NAME" ]; then
  echo "Suppression du dossier existant $REPO_NAME"
  rm -rf "$REPO_NAME"
fi

echo "Répertoire courant: $(pwd)"
echo "Clonage du dépôt..."
if ! timeout 300s git clone "$REPO_URL"; then
    echo "Erreur: Échec du clonage du dépôt" >&2
    exit 1
fi

if [ ! -d "$REPO_NAME" ]; then
    echo "Erreur: Le dépôt n'a pas été cloné correctement" >&2
    exit 1
fi
echo "Dépôt cloné avec succès"

# Après le clonage du repo, installer les dépendances Node.js si package.json existe
if [ -f "$REPO_NAME/package.json" ]; then
    echo "Installation des dépendances Node.js..."
    if ! timeout 600s (cd "$REPO_NAME" && npm install --no-audit --no-fund --no-package-lock); then
        echo "Erreur: Échec de l'installation des dépendances" >&2
        exit 1
    fi
    echo "Dépendances Node.js installées avec succès"
fi

# Après le clonage du repo, générer automatiquement sonar-project.properties si absent
SONAR_PROPS_PATH="$REPO_NAME/sonar-project.properties"
if [ ! -f "$SONAR_PROPS_PATH" ]; then
  echo "Génération automatique de $SONAR_PROPS_PATH"
  cat > "$SONAR_PROPS_PATH" <<EOF
sonar.projectKey=eyajrah_${REPO_NAME}
sonar.organization=eyajrah
sonar.host.url=https://sonarcloud.io
sonar.sources=.
EOF
  echo "Fichier sonar-project.properties généré"
fi

# Bloc SonarCloud
SONAR_SCRIPT_PATH="$SCRIPT_DIR/setup-sonar.sh"
if [ -f "$REPO_NAME/sonar-project.properties" ]; then
  if [ -f "$SONAR_SCRIPT_PATH" ]; then
    echo "[DEBUG] Lancement setup-sonar.sh" >&2
    if ! timeout 600s "$SONAR_SCRIPT_PATH" "$REPO_NAME" "$PROJECT_KEY" "$SONAR_SOURCES"; then
      echo "[DEBUG] setup-sonar.sh a échoué" >&2
      exit 1
    fi
  else
    echo "[DEBUG] setup-sonar.sh non trouvé, utilisation directe de sonar-scanner" >&2
    if ! timeout 600s (cd "$REPO_NAME" && sonar-scanner); then
      echo "[DEBUG] sonar-scanner a échoué" >&2
      exit 1
    fi
  fi
else
  echo "[WARN] Aucun fichier sonar-project.properties trouvé, analyse SonarCloud ignorée."
  echo '{"error":"sonar-project.properties not found"}' > "$TEMP_DIR/sonar_results.json"
fi

echo "Résultat SonarCloud écrit dans : $TEMP_DIR/sonar_results.json"
echo "=== [DEBUG] Après écriture sonar_results.json ==="

# EN DEHORS DU BLOC if/fi : outils de scan complémentaires et combinaison

echo "=== [DEBUG] Juste avant get_other_tool_results ==="
set +e
get_other_tool_results
set -e
echo "=== [DEBUG] Juste après get_other_tool_results ==="
echo "✅ Autres outils analysés avec succès"

echo "Vérification des fichiers de résultats..."
if [ ! -f "$TEMP_DIR/sonar_results.json" ]; then echo "❌ sonar_results.json manquant"; fi
if [ ! -f "$TEMP_DIR/trivy.json" ]; then echo "❌ trivy.json manquant"; fi
if [ ! -f "$TEMP_DIR/snyk.json" ]; then echo "❌ snyk.json manquant"; fi
if [ ! -f "$TEMP_DIR/dc-report/dependency-check-report.json" ]; then echo "❌ dependency-check-report.json manquant"; fi

echo "Combinaison des résultats..."
jq -s '{
  "sonarcloud_metrics": .[0].sonarcloud_metrics,
  "sonarcloud_vulnerabilities": .[0].sonarcloud_vulnerabilities,
  "trivy_results": .[1],
  "snyk_results": .[2],
  "owasp_dependency_check": .[3],
  "repository": .[0].repository,
  "timestamp": .[0].timestamp
}' \
"$TEMP_DIR/sonar_results.json" \
"$TEMP_DIR/trivy.json" \
"$TEMP_DIR/snyk.json" \
"$TEMP_DIR/dc-report/dependency-check-report.json" \
> "$TEMP_DIR/combined_results.json"

echo "Fichier de résultats combiné généré à : $TEMP_DIR/combined_results.json"

echo "Mise à jour de l'API..."
echo "Contenu du fichier combined_results.json :"
cat "$TEMP_DIR/combined_results.json"

if ! timeout 60s curl -v -X POST \
    -H "Content-Type: application/json" \
    -H "Accept: application/json" \
    -d @"$TEMP_DIR/combined_results.json" \
    http://localhost:5000/api/update-results; then
    echo "Erreur: Échec de la mise à jour de l'API" >&2
    echo "Détails de l'erreur :"
    curl -v -X POST \
        -H "Content-Type: application/json" \
        -H "Accept: application/json" \
        -d @"$TEMP_DIR/combined_results.json" \
        http://localhost:5000/api/update-results
    exit 1
fi

echo "api updated"
echo "LOG_FILE_PATH:$LOG_FILE"

set +x
sleep 60
